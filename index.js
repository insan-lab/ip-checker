import React, { useState, useMemo } from 'react';
import { Copy, CheckCircle, XCircle } from 'lucide-react';

const ScopeChecker = () => {
  const [inputIP, setInputIP] = useState('');

  // SIX Group CIDR ranges in scope
  const cidrRanges = [
    '153.46.96.0/20',
    '193.110.154.0/24',
    '193.109.229.0/24',
    '153.46.240.0/20',
    '153.46.108.0/22',
    '62.192.20.16/29',
    '153.46.111.0/24',
    '153.46.104.0/22',
    '146.109.8.0/22',
    '194.209.121.0/24',
    '153.46.30.0/23',
    '153.46.32.0/23',
    '153.46.34.0/23',
    '174.44.253.152/29',
    '153.46.0.0/16',
    '146.109.2.0/24',
    '146.109.3.0/24',
    '146.109.4.0/24',
    '185.210.32.0/22',
    '153.46.162.0/23',
    '212.95.227.64/26',
    '146.109.1.0/24',
    '146.109.8.0/21',
    '153.46.176.0/22',
    '153.46.48.0/22',
    '146.109.64.0/24',
    '146.109.65.0/24',
    '146.109.66.0/24',
    '146.109.68.0/24',
    '146.109.67.0/24',
    '146.109.140.0/24',
    '146.109.141.0/24',
    '146.109.142.0/24',
    '146.109.143.0/24',
    '146.109.148.0/24',
    '146.109.149.0/24',
    '146.109.150.0/24',
    '146.109.151.0/24',
    '146.109.161.0/24',
    '193.5.66.0/23',
    '193.8.251.0/24',
    '194.35.79.0/24',
  ];

  // Parse IPs from Shodan document
  const shodan_ips = [
    '153.46.97.4', '153.46.107.154', '153.46.97.9', '153.46.97.44', '153.46.97.154',
    '153.46.107.131', '153.46.98.73', '153.46.38.67', '153.46.70.67', '4.226.36.57',
    '153.46.98.65', '153.46.252.205', '153.46.96.78', '146.109.8.195', '146.109.8.193',
    '153.46.98.72', '74.242.192.130', '153.46.98.69', '4.226.24.193', '146.109.8.197',
    '153.46.38.65', '153.46.70.65', '153.46.98.71', '4.226.8.16', '146.109.8.199',
    '4.226.34.134', '153.46.97.157', '20.250.186.54', '34.120.126.158', '35.244.129.184',
    '34.36.22.63', '34.36.192.24', '153.46.38.67', '153.46.70.67', '153.46.107.134',
    '146.109.10.4', '146.109.10.3', '146.109.8.3', '153.46.241.12', '153.46.105.140',
    '153.46.97.140', '153.46.130.148', '153.46.130.146', '153.46.97.237', '20.203.159.64',
    '153.46.107.153', '153.46.101.4', '153.46.101.2', '153.46.97.36', '153.46.97.38',
    '153.46.101.3', '153.46.97.155', '153.46.107.132', '153.46.97.218', '153.46.254.185',
    '153.46.101.77', '153.46.101.80', '153.46.105.77', '153.46.105.80', '153.46.97.54',
    '153.46.97.53', '153.46.97.52', '20.250.27.151', '153.46.133.4', '153.46.227.4',
    '153.46.98.12', '153.46.98.20', '153.46.253.14', '153.46.97.33', '153.46.97.31',
    '153.46.97.32', '153.46.101.26', '153.46.250.112', '153.46.97.220', '153.46.97.217',
    '153.46.250.107', '153.46.105.231', '153.46.37.135', '153.46.69.135', '153.46.105.229',
    '153.46.37.136', '153.46.69.136', '153.46.97.227', '153.46.105.233', '153.46.37.216',
    '153.46.69.216', '153.46.37.222', '153.46.69.222', '153.46.250.106', '153.46.99.190',
    '153.46.97.163', '130.248.172.31', '153.46.254.117', '153.46.243.112', '153.46.252.107',
    '153.46.100.67', '153.46.107.158', '153.46.254.176', '153.46.105.215', '153.46.99.151',
    '153.46.105.213', '153.46.105.178', '153.46.98.16', '34.38.23.37', '153.46.30.10',
    '153.46.162.10', '153.46.69.138', '153.46.69.139', '153.46.107.152', '153.46.105.166',
    '153.46.105.168', '153.46.105.167', '153.46.105.169', '153.46.99.177', '153.46.37.156',
    '153.46.69.156', '153.46.99.176', '153.46.37.155', '153.46.69.155', '153.46.99.175',
    '153.46.37.154', '153.46.69.154', '153.46.105.230', '153.46.37.147', '153.46.105.232',
    '153.46.37.148', '146.109.10.65', '146.109.8.94', '153.46.109.136', '153.46.109.142',
    '153.46.109.138', '153.46.109.144', '153.46.101.136', '153.46.101.138', '153.46.107.150',
    '153.46.107.146', '153.46.107.148', '153.46.250.107', '153.46.105.231', '153.46.37.135',
    '153.46.69.135', '153.46.105.229', '153.46.37.136', '153.46.69.136', '153.46.97.227',
    '153.46.105.233', '153.46.97.163', '153.46.97.161', '153.46.97.164', '153.46.97.170',
    '153.46.97.169', '153.46.97.171', '153.46.97.168', '153.46.107.164', '153.46.105.254',
    '153.46.107.167', '153.46.107.165', '153.46.107.163', '153.46.133.21', '153.46.69.242',
    '153.46.97.167', '153.46.37.153', '153.46.69.150', '153.46.97.212', '153.46.107.139',
    '153.46.99.42', '153.46.101.98', '153.46.252.206', '153.46.98.73', '153.46.38.67',
    '153.46.70.67', '153.46.130.139', '153.46.97.228', '153.46.97.24', '153.46.97.162',
    '153.46.31.231', '153.46.106.22', '153.46.106.24', '146.109.10.2', '146.109.8.2',
    '185.210.33.35', '153.46.176.33', '153.46.48.33', '185.210.32.35', '153.46.163.231',
    '153.46.98.22', '153.46.98.24', '153.46.96.180', '153.46.133.12', '153.46.97.213',
    '153.46.107.155', '146.109.163.150', '153.46.99.173', '153.46.107.158', '153.46.105.142',
    '153.46.251.61', '153.46.111.11', '153.46.98.166', '153.46.252.189', '153.46.252.219',
    '153.46.101.75', '153.46.101.78', '153.46.105.75', '153.46.105.78', '149.126.4.41',
    '153.46.254.170', '153.46.105.72', '153.46.97.104', '153.46.97.181', '153.46.97.182',
    '153.46.229.71', '153.46.130.85', '153.46.229.70', '153.46.130.86', '153.46.130.87',
    '153.46.229.77', '153.46.130.84', '153.46.229.69', '153.46.101.23', '153.46.97.25',
    '153.46.97.5', '153.46.254.183', '153.46.105.215', '153.46.105.202', '153.46.105.205',
    '153.46.105.213', '153.46.105.212', '153.46.105.215', '153.46.105.202', '153.46.105.213',
    '153.46.105.208', '153.46.107.168', '153.46.99.8', '153.46.99.7', '153.46.99.5',
    '153.46.99.6', '153.46.241.9', '153.46.105.137', '153.46.97.137', '153.46.130.140',
    '153.46.97.229', '153.46.107.133', '153.46.109.130', '153.46.109.132', '153.46.101.130',
    '153.46.101.132', '153.46.97.3', '153.46.97.21', '153.46.97.30', '153.46.97.159',
    '153.46.97.178', '153.46.99.174', '153.46.99.170', '153.46.99.168', '153.46.107.151',
    '153.46.252.220', '153.46.107.149', '153.46.252.221', '153.46.37.240', '153.46.69.240',
    '153.46.252.203', '153.46.107.147', '153.46.105.253', '153.46.37.206', '153.46.69.206',
    '153.46.125.200', '153.46.221.200', '153.46.105.252', '153.46.97.166', '153.46.97.152',
    '153.46.97.165', '153.46.97.245', '153.46.97.153', '153.46.97.169', '153.46.105.147',
    '153.46.105.211', '153.46.97.147', '153.46.97.211', '153.46.97.151', '153.46.97.4',
    '153.46.97.22', '153.46.101.81', '193.247.180.4', '153.46.105.216', '153.46.105.218',
    '153.46.97.29', '153.46.97.170', '153.46.49.97.216', '153.46.105.220', '153.46.105.221',
    '153.46.105.222', '153.46.105.214', '153.46.105.148', '153.46.97.214', '153.46.97.148',
    '153.46.69.8', '153.46.98.76', '153.46.38.66', '153.46.70.66', '153.46.98.75',
    '153.46.98.81', '153.46.38.65', '153.46.70.65', '153.46.98.83', '153.46.105.219',
    '153.46.101.76', '153.46.101.79', '153.46.105.76', '153.46.105.79', '153.46.97.215',
    '153.46.97.246', '153.46.252.153', '153.46.105.251', '153.46.105.249', '153.46.105.250',
    '153.46.97.216', '153.46.97.215', '153.46.97.214', '153.46.107.142', '153.46.107.140',
    '153.46.37.134', '153.46.69.134', '153.46.107.141', '153.46.37.132', '153.46.69.132',
    '153.46.37.133', '153.46.69.133', '153.46.97.233', '153.46.97.234', '153.46.97.236',
    '153.46.97.238', '153.46.97.223', '153.46.252.148', '153.46.241.3', '153.46.105.131',
    '153.46.252.133', '153.46.97.131', '153.46.97.120', '153.46.101.1', '153.46.97.1',
    '153.46.97.7', '153.46.98.66', '153.46.98.70', '153.46.98.78', '153.46.98.82',
    '153.46.241.6', '153.46.105.134', '153.46.97.134', '153.46.130.132', '153.46.130.137',
    '153.46.97.226', '153.46.98.19', '153.46.227.4', '153.46.98.20', '153.46.97.4'
  ];

  // Convert IP string to number
  const ipToNumber = (ip) => {
    const parts = ip.split('.');
    return parts.reduce((acc, part) => (acc << 8) + parseInt(part), 0) >>> 0;
  };

  // Parse CIDR notation
  const parseCIDR = (cidr) => {
    const [ip, mask] = cidr.split('/');
    const ipNum = ipToNumber(ip);
    const maskBits = parseInt(mask);
    const maskNum = (0xffffffff << (32 - maskBits)) >>> 0;
    return { ipNum, maskNum };
  };

  // Check if IP is in range
  const isInScope = (ip) => {
    const ipNum = ipToNumber(ip);
    return cidrRanges.some(cidr => {
      const { ipNum: rangeIp, maskNum } = parseCIDR(cidr);
      return (ipNum & maskNum) === (rangeIp & maskNum);
    });
  };

  // Process shodan IPs
  const scopeResults = useMemo(() => {
    const inScope = [];
    const outOfScope = [];
    const uniqueIps = [...new Set(shodan_ips)];
    
    uniqueIps.forEach(ip => {
      if (isInScope(ip)) {
        inScope.push(ip);
      } else {
        outOfScope.push(ip);
      }
    });
    
    return { inScope: inScope.sort(), outOfScope: outOfScope.sort(), total: uniqueIps.length };
  }, []);

  const checkCustomIP = (ip) => {
    if (!ip.match(/^\d+\.\d+\.\d+\.\d+$/)) return null;
    return isInScope(ip);
  };

  const customResult = inputIP ? checkCustomIP(inputIP) : null;

  return (
    <div className="w-full max-w-4xl mx-auto p-6 bg-slate-900 text-white rounded-lg space-y-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold">SIX Group Scope Validator</h1>
        <p className="text-slate-300">Check IPs against 41 CIDR ranges • 1.5x bounty on new assets</p>
      </div>

      {/* Custom IP Checker */}
      <div className="bg-slate-800 p-4 rounded space-y-3">
        <h2 className="text-lg font-semibold">Quick Check</h2>
        <div className="flex gap-2">
          <input
            type="text"
            placeholder="Enter IP (e.g., 153.46.97.4)"
            value={inputIP}
            onChange={(e) => setInputIP(e.target.value)}
            className="flex-1 px-3 py-2 bg-slate-700 rounded border border-slate-600 text-white placeholder-slate-400"
          />
        </div>
        {customResult !== null && (
          <div className={`flex items-center gap-2 ${customResult ? 'text-green-400' : 'text-red-400'}`}>
            {customResult ? (
              <><CheckCircle size={20} /> <span className="font-semibold">IN SCOPE</span></>
            ) : (
              <><XCircle size={20} /> <span className="font-semibold">OUT OF SCOPE</span></>
            )}
          </div>
        )}
      </div>

      {/* Stats */}
      <div className="grid grid-cols-3 gap-4">
        <div className="bg-green-900/30 border border-green-700 p-4 rounded">
          <div className="text-sm text-green-300">In Scope</div>
          <div className="text-2xl font-bold text-green-400">{scopeResults.inScope.length}</div>
        </div>
        <div className="bg-red-900/30 border border-red-700 p-4 rounded">
          <div className="text-sm text-red-300">Out of Scope</div>
          <div className="text-2xl font-bold text-red-400">{scopeResults.outOfScope.length}</div>
        </div>
        <div className="bg-blue-900/30 border border-blue-700 p-4 rounded">
          <div className="text-sm text-blue-300">Total Unique</div>
          <div className="text-2xl font-bold text-blue-400">{scopeResults.total}</div>
        </div>
      </div>

      {/* In Scope Results */}
      <div className="bg-slate-800 p-4 rounded space-y-3">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-semibold text-green-400">✓ In Scope IPs ({scopeResults.inScope.length})</h2>
        </div>
        <div className="bg-slate-700 p-3 rounded max-h-48 overflow-y-auto text-sm font-mono space-y-1">
          {scopeResults.inScope.length > 0 ? (
            scopeResults.inScope.map(ip => (
              <div key={ip} className="text-green-300 hover:bg-slate-600 p-1 rounded cursor-pointer">
                {ip}
              </div>
            ))
          ) : (
            <div className="text-slate-400">None</div>
          )}
        </div>
      </div>

      {/* Out of Scope Results */}
      <div className="bg-slate-800 p-4 rounded space-y-3">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-semibold text-red-400">✗ Out of Scope IPs ({scopeResults.outOfScope.length})</h2>
        </div>
        <div className="bg-slate-700 p-3 rounded max-h-48 overflow-y-auto text-sm font-mono space-y-1">
          {scopeResults.outOfScope.length > 0 ? (
            scopeResults.outOfScope.map(ip => (
              <div key={ip} className="text-red-300 hover:bg-slate-600 p-1 rounded cursor-pointer">
                {ip}
              </div>
            ))
          ) : (
            <div className="text-slate-400">None</div>
          )}
        </div>
      </div>

      <div className="text-xs text-slate-400 border-t border-slate-700 pt-4">
        <p>Shodan data includes: {scopeResults.total} unique IPs from www.six-group.com DNS records</p>
        <p className="mt-2">⚠️ Many out-of-scope IPs are Azure/GCP managed services or external CDNs. Focus on 153.46.x.x and 146.109.x.x ranges for direct SIX infrastructure.</p>
      </div>
    </div>
  );
};

export default ScopeChecker;
